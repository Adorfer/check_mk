#!/bin/bash
#/usr/lib/check_mk_agent/local

export LANG=de_DE.UTF-8

function confline # get first line from file $1 mathing $2, stripped of # and ; comment lines, stripped spaces and tabs down to spaces, remove trailing ;
{
 echo $(cat $1|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i "$2"|head -n 1)
}

function conflines # get lines from file $1 mathing $2, stripped of # and ; comment lines, stripped spaces and tabs down to spaces, remove trailing ;
{
 echo "$(cat $1|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i $2)"
}

## static data
kernel=$(uname -r);
release=$(lsb_release -ds);
latestbootkernel=$(ls -t /boot/vmlinuz-* | sed "s/\/boot\/vmlinuz-//g" | head -n1)

## ubuntu-Status
echo "0 Ubuntu-Release Ubuntu-Release=$release; $release - Kernel $kernel; Boot $latestbootkernel"
## ubuntu patch status
osversion=$(lsb_release -a 2>/dev/null|grep Description|cut -d: -f2|xargs)
nupdates=0
supdates=0
if [[ $osversion = "Ubuntu 14.04"* && -x /usr/lib/update-notifier/update-motd-updates-available ]] ; then
  nupdates=$(/usr/lib/update-notifier/update-motd-updates-available|grep -i 'packages\ can\ be\ updated\|Software-Pakete'|cut -d" " -f1)
  supdates=$(/usr/lib/update-notifier/update-motd-updates-available|grep -i 'updates\ are\ security\ updates\|Sicherheitsaktualisierungen'|cut -d" " -f1)
 fi
if [[ $osversion = "Ubuntu 16.04"* && -x /var/lib/update-notifier/updates-available ]] ; then
  nupdates=$(cat /var/lib/update-notifier/updates-available|grep -i 'packages\ can\ be\ updated\|Software-Pakete'|cut -d" " -f1)
  supdates=$(cat /var/lib/update-notifier/updates-available|grep -i 'updates\ are\ security\ updates\|Sicherheitsaktualisierungen'|cut -d" " -f1)
 elif [ -x /usr/lib/update-notifier/apt-check ] ; then
  nupdates=$(/usr/lib/update-notifier/apt-check 2>&1 | cut -d ';' -f 1)
  supdates=$(/usr/lib/update-notifier/apt-check 2>&1 | cut -d ';' -f 2)
 else
#  nupdates=$(apt list --upgradable 2>/dev/null|grep -c "]$")
  supdates=0; supdates=$(apt-get upgrade -s 2>/dev/null| grep ^Security |wc -l)
  nupdates=0; nupdates=$(apt-get upgrade -s 2>/dev/null| grep ^Inst |wc -l)
 fi

reboot=0
if [ -x /usr/lib/update-notifier/update-motd-reboot-required ]; then
  reboot=$(cat /usr/lib/update-notifier/update-motd-reboot-required|grep \*\*\**\*\*\*|wc -l)
 fi
if [ -x /var/run/reboot-required ]; then
  reboot=$(cat /var/run/reboot-required|grep \*\*\**\*\*\*|wc -l)
 fi
if [ "$kernel" != "$latestbootkernel" ]; then
  reboot=1
 fi
echo "P Ubuntu-Patchstatus SecurityUpdates-waiting=$supdates.0;0:0.9;0:2|RegularUpdates-waiting=$nupdates.0;0:25;0:40|Reboot-waiting=$reboot.0;0:0.9;0:1"

## logins
logincount=$(who|wc -l)
logout="0 LocalUser CurrentLogins=$logincount.0; CurrentLogins:$logincount"
i=0
TFILE="/tmp/$(basename $0).$$.tmp"
who -u>$TFILE
while read line; do
  i=$(( i + 1))
  line=$(echo $line|sed s/\ +//|tr -s " ")
  user=$(echo $line|cut -d" " -f1)
  tty=$(echo $line|cut -d" " -f2)
  idle=$(echo $line|cut -d" " -f6)
  ip=$(echo $line|cut -d" " -f8)
  logout="$logout\n login-$i-user:$user login-$i-tty:$tty login-$i-idle:$idle login-$i-source:$ip"
 done<$TFILE
rm $TFILE
echo "$logout"

## Batman-Advanced 
bat_version=$(batctl -v)
bat_adv_v=$(batctl -v|cut -d" " -f4|tr -d "]")
bat_ctl_v=$(batctl -v|cut -d" " -f2)
batadvequal=2
if [ "$bat_adv_v" == "$bat_ctl_v" ] ; then
  batadvequal=1
 fi

echo "P Batman-Version kernelvsctl=$batadvequal;1:1;0:2 versions:$bat_version"
#list=$(ls -F /sys/kernel/debug/batman_adv|grep /)
list=$(ip link|grep ",UP,"|cut -d" " -f2|tr -d ":")
if [[ $list != *"bat0"* ]]; then
  list="$list bat0"
 fi
for b in $list; do
  z=$( batctl -m $b o 2> /dev/null | wc -l )
  if [ $z -ge 1 ]; then
    router=$(($(batctl -m $b o|grep "^\ \*"|wc -l)-0 ))
    clients=$(batctl -m $b tg| grep "^\ \*"|grep -cEo "\[.*W.*\]+")
    owngw=$(batctl -m $b gw|cut -d" " -f1|sed s/server/1/|sed s/off/0/)
    gateways=$(($(batctl -m $b gwl|grep -A 999 outgoingIf|grep -v outgoingIf|wc -l ) + $owngw))
    claims=$(batctl -m $b cl|wc -l )
#    ips=$(( $(batctl -m $b dc 2> /dev/null |wc -l) - 2))
    wlow=$(( $router * 20 / 100 ))
    clow=$(( $router * 5 / 100 ))
    wlimit=$(( $router * 5 ))
    climit=$(( $router * 10 ))
    echo "P Batman-$b Router=$router.0;5:350;1:500|Clients=$clients.0;$wlow.0:$wlimit.0;$clow.0:$climit.0|Claims=$claims.0;0:9999;0:9999|Gateways=$gateways.0;0:3;0:5";
   fi;
 done


#L2TP-Tunneldigger
l_tunnel=$(ip a |grep l2tp|grep tunneldigger -c);
tunneldigger=$(ifconfig|grep tunneldigger -c);

#Output
echo "P L2TP Clients=$l_tunnel.0;1:50;0:80|Tunneldiggerbridges=$tunneldigger.0;0.1:1;0.1:2; L2TP-Clients:$l_tunnel Tunneldiggerbridges:$tunneldigger"



















