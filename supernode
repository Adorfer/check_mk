#!/bin/bash
#/usr/lib/check_mk_agent/local
export LANG=de_DE.UTF-8

function confline # get first line from file $1 mathing $2, stripped of # and ; comment lines, stripped spaces and tabs down to spaces, remove trailing ;
{
 echo $(cat $1|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i "$2"|head -n 1)
}

function ati # ipv4 to longint
{
 ip4=$1; ipno=0
 for (( i=0 ; i<4 ; ++i )); do
   ((ipno+=${ip4%%.*}*$((254**$((3-${i})))))) # .0 .255 should not be counted
   ip4=${ip4#*.}
  done
 echo $ipno
}

BASE=/opt/eulenfunk/supernode
. ${BASE}/supernode.vars
. ${BASE}/supernode.config

## static data
kernel=$(uname -r);
release=$(lsb_release -ds);
latestbootkernel=$(ls -t /boot/vmlinuz-* | sed "s/\/boot\/vmlinuz-//g" | head -n1)

## ubuntu-Status
echo "0 Ubuntu-Release Ubuntu-Release=$release; $release - Kernel $kernel; Boot $latestbootkernel"
## ubuntu patch status
osversion=$(lsb_release -a 2>/dev/null|grep Description|cut -d: -f2|xargs)
nupdates=0
supdates=0
if [[ $osversion = "Ubuntu 14.04"* && -x /usr/lib/update-notifier/update-motd-updates-available ]] ; then
  nupdates=$(/usr/lib/update-notifier/update-motd-updates-available|grep -i 'packages\ can\ be\ updated\|Software-Pakete'|cut -d" " -f1)
  supdates=$(/usr/lib/update-notifier/update-motd-updates-available|grep -i 'updates\ are\ security\ updates\|Sicherheitsaktualisierungen'|cut -d" " -f1)
 fi
if [[ $osversion = "Ubuntu 16.04"* && -x /var/lib/update-notifier/updates-available ]] ; then
  nupdates=$(cat /var/lib/update-notifier/updates-available|grep -i 'packages\ can\ be\ updated\|Software-Pakete'|cut -d" " -f1)
  supdates=$(cat /var/lib/update-notifier/updates-available|grep -i 'updates\ are\ security\ updates\|Sicherheitsaktualisierungen'|cut -d" " -f1)
 elif [ -x /usr/lib/update-notifier/apt-check ] ; then
  nupdates=$(/usr/lib/update-notifier/apt-check 2>&1 | cut -d ';' -f 1)
  supdates=$(/usr/lib/update-notifier/apt-check 2>&1 | cut -d ';' -f 2)
 else
#  nupdates=$(apt list --upgradable 2>/dev/null|grep -c "]$")
  supdates=0; supdates=$(apt-get upgrade -s 2>/dev/null| grep ^Security |wc -l)
  nupdates=0; nupdates=$(apt-get upgrade -s 2>/dev/null| grep ^Inst |wc -l)
 fi

reboot=0
if [ -x /usr/lib/update-notifier/update-motd-reboot-required ]; then
  reboot=$(cat /usr/lib/update-notifier/update-motd-reboot-required|grep \*\*\**\*\*\*|wc -l)
 fi
if [ -x /var/run/reboot-required ]; then
  reboot=$(cat /var/run/reboot-required|grep \*\*\**\*\*\*|wc -l)
 fi
if [ "$kernel" != "$latestbootkernel" ]; then
  reboot=1
 fi
echo "P Ubuntu-Patchstatus SecurityUpdates-waiting=$supdates.0;0:0.5;0:1|RegularUpdates-waiting=$nupdates.0;0:20;0:30|Reboot-waiting=$reboot.0;0:0.5;0:1"

## Batman-Advanced 
bat_version=$(batctl -v)
bat_adv_v=$(batctl -v|cut -d" " -f4|tr -d "]")
bat_ctl_v=$(batctl -v|cut -d" " -f2)
batadvequal=2
if [ "$bat_adv_v" == "$bat_ctl_v" ] ; then
  batadvequal=1
 fi

echo "P Batman-Version kernelvsctl=$batadvequal;1:1;0:2 versions:$bat_version"
#list=$(ls -F /sys/kernel/debug/batman_adv|grep /)
list=$(ip link|grep ",UP,"|cut -d" " -f2|tr -d ":")
if [[ $list != *"bat0"* ]]; then
  list="$list bat0"
 fi
for b in $list; do
  z=$( batctl -m $b o 2> /dev/null | wc -l )
  if [ $z -ge 1 ]; then
    router=$(($(batctl -m $b o|grep "^\ \*"|wc -l)-0 ))
    clients=$(batctl -m $b tg| grep "^\ \*"|grep -cEo "\[.*W.*\]+")
    owngw=$(batctl -m $b gw|cut -d" " -f1|sed s/server/1/|sed s/off/0/)
    gateways=$(($(batctl -m $b gwl|grep -A 999 outgoingIf|grep -v outgoingIf|wc -l ) + $owngw))
    claims=$(batctl -m $b cl|wc -l )
#    ips=$(( $(batctl -m $b dc 2> /dev/null |wc -l) - 2))
    wlow=$(( $router * 20 / 100 ))
    clow=$(( $router * 5 / 100 ))
    wlimit=$(( $router * 5 ))
    climit=$(( $router * 10 ))
    echo "P Batman-$b Router=$router.0;5:350;1:500|Clients=$clients.0;$wlow.0:$wlimit.0;$clow.0:$climit.0|Claims=$claims.0;0:9999;0:9999|Gateways=$gateways.0;0:3;0:5";
   fi;
 done

## Fastd
fastd_version=$(fastd -v|cut -d ' ' -f 2);
echo "0 Fastd_Version Version=$fastd_version; Fastd $fastd_version ";
fastdp=/etc/fastd
list=$(ls -F $fastdp|grep /|cut -d '/' -f 1)
for fasti in $list ; do
  clients=$(nc -U $(cat $fastdp/$fasti/fastd.conf|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i 'status socket'|cut -d '"' -f 2)|grep '"established"' -o|wc -l);
  interface=$(confline $fastdp/$fasti/fastd.conf interface|cut -d '"' -f 2)
  mtu=$(confline $fastdp/$fasti/fastd.conf mtu|cut -d ' ' -f 2|cut -d ';' -f1)
  port=$(confline $fastdp/$fasti/fastd.conf bind|cut -d ':' -f 2|cut -d ' ' -f1)
  limit=$(confline $fastdp/$fasti/fastd.conf 'peer limit'|cut -d ' ' -f 3|cut -d ';' -f1)
  climit=$(( $limit * 95 / 100 ))
  wlimit=$(( $limit * 90 / 100 ))
  clow=$(( $limit / 100 ))
  wlow=$(( $limit * 5 / 100 ))
  echo "P Fastd_Clients_$interface Clients=$clients.0;$wlow:$wlimit;$clow:$climit; Interface: $interface, Port: $port, MTU: $mtu, Peer Limit: $limit"
 done

## isc-dhcpd-server
# leasescheck
# needs script https://github.com/eulenfunk/scripts/blob/master/dhcpleases
# needs dhtest from https://github.com/saravana815/dhtest compiled
  dhcpconf=/etc/dhcp/dhcpd.conf
  dhcpinterface=$(confline $dhcpconf "interface "|cut -d" " -f2)
  dhcprunning=$(ps ax|grep dhcpd.pid|grep dhcpd.conf|wc -l)
  leasesage=$((($(date +%s) - $(date +%s -r "/var/lib/dhcp/dhcpd.leases")) / 60 ))
  dhcprange=$(confline $dhcpconf range)
  dhcpstart=$(echo $dhcprange|cut -d" " -f2)
  dhcpend=$(echo $dhcprange|cut -d" " -f3)
  totalleases=$(($(ati $dhcpend) - $(ati $dhcpstart)))
if [ -r /opt/eulenfunk/dhcpleases ] ; then
  activeleases=$(/opt/eulenfunk/dhcpleases|grep "^| Total"|cut -d":" -f2|sed s/\ //)
  remainingleases=$(($totalleases - $activeleases))
 fi
  dhtest=1
if [ -r /opt/eulenfunk/dhtest ] ; then
  pushd /tmp >/dev/null
  clientmac=ca:b1:e9:fa:b1:77
  dhtestack=$(/opt/eulenfunk/dhtest -i $dhcpinterface -m $clientmac -h check_mk -T 6|grep "DHCP ack received")
  if [ -n "$dhtestack" ] ; then
    dhtest=$(echo $dhtestack|wc -l)
    dhtestip=$(echo $dhtestack|cut -d":" -f2)
   fi
  rm -f "$clientmac"
  popd >/dev/null
 fi
  dhcpstatus=$leasesage$dhcprunning$dhtest
  actwarn=$(($totalleases * 75 / 100))
  actcrit=$(($totalleases * 90 / 100))
  echo "P Dhcp-Leases serverstatus=$dhcpstatus.0;11:3011;11:12011|active-leases=$activeleases.0;5:$actwarn;1:$actcrit active:$activeleases remaining:$remainingleases pool=$totalleases dhcpdrunning=$dhcprunning leasesage=$leasesage dhtest=$dhtest $dhtestack";

## FFRL Uplinkcheck
  testipv6a=2001:4860:4860::8888 # google-dns
  testipv6b=2620:0:ccc::2 # opendns
  testhost=www.google.com
  br0ipv4=$(ip addr show br0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)

  if [ ! "$SUPERNODE_IPV4_TRANS_ADDR" == "#" ]; then
    konzintv4=$(echo $SUPERNODE_IPV4_TRANS_ADDR|cut -d"." -f1-3).254
    konzv4=$(ping -c1 -I $SUPERNODE_TRANS_INTERFACE $konzintv4 >/dev/null 2>1;echo $?)
   else
    konzv4="0"
   fi
  if [ ! "$SUPERNODE_IPV6_PREFIX" == "#" ]; then
    konzintv6=$(echo $SUPERNODE_IPV6_PREFIX|cut -d"/" -f1)1
    konzv6=$(ping6 -c1 -i 0.5 -I $SUPERNODE_TRANS_INTERFACE $konzintv6 >/dev/null 2>1; echo $?)
    ffrlv6=$(ping6 -c1 -i 0.5 -I $SUPERNODE_TRANS_INTERFACE $testipv6a >/dev/null 2>1; echo $?)
    if [ ! "$ffrlv6" == "0" ]; then
      ffrlv6=$(ping6 -c1 -i 0.5 -I $SUPERNODE_TRANS_INTERFACE $testipv6b >/dev/null 2>1; echo $?)
     fi
   else
    konzv6="0"
    ffrlv6="0"
   fi
  ffrlv4=$(wget -t1 -T1 --bind-address=$br0ipv4 --spider http://www.google.de>/dev/null 2>1;echo $?)
  echo "P ffrl uplinkfail=$konzv6$konzv4$ffrlv6$ffrlv4.0;0:0;0:0 PingErrors KonzV6:$konzv6 KonzV4:$konzv4 PublicV6:$ffrlv6 PublicV4:$ffrlv4"

## DNS check
# dnsmasq running
  dnsmasqrunning=$(ps ax |grep dnsmasq.pid|grep resolv.conf|wc -l)
  if [ "$dnsmasqrunning" == "1" ]; then
    ipv4=$(ip -4 a s br0|grep inet|cut -d" " -f6|cut -d"/" -f1|head -1)
    ipv6=$(ip -6 a s br0|grep inet|grep -v "deprecated"|cut -d" " -f6|cut -d"/" -f1|head -1)
    dns4via4=$(dig @$ipv4 A $testhost +time=1|grep -v ";"|grep A|grep $testhost|head -1|wc -l)
    dns6via4=$(dig @$ipv4 AAAA $testhost +time=1|grep -v ";"|grep AAAA|grep $testhost|head -1|wc -l)
    dns4via6=$(dig @$ipv6 A $testhost +time=1|grep -v ";"|grep A|grep $testhost|head -1|wc -l)
    dns6via6=$(dig @$ipv6 AAAA $testhost +time=1|grep -v ";"|grep AAAA|grep $testhost|head -1|wc -l)
   else
    dns4via4=0; dns6via4=0; dns4via6=0; dns6via6=0;
   fi
  dnsstatus=$dnsmasqrunning$dns4via4$dns6via6$dns4via6$dns6via4
  echo "P Dns dnsstatus=$dnsstatus.0;11111:11111;11111:11111 dnsmasqrunning=$dnsmasqrunning dns4via4=$dns4via4 dns6via6=$dns6via6 dns4via6=$dns4via6 dns6via4=$dns6via4";

## radvd check (warum auch immer da 2 Prozesse laufen, es scheint so sein zu mÃ¼ssen)
  radvdrunning=$(ps ax |grep radvd.pid|grep -v grep|wc -l)
  radvdstatus=$(echo $(ps ax |grep radvd.pid|grep -v grep|cut -c16)|tr -d "/n"|tr -d " ")
  echo "P radvd radvdprocs=$radvdrunning.0;2:2;2:2 radvdstatus=$radvdstatus";

## Logins
logincount=$(who|wc -l)
logout="0 LocalUser CurrentLogins=$logincount.0; CurrentLogins:$logincount"
i=0
TFILE="/tmp/$(basename $0).$$.tmp"
who -u>$TFILE
while read line; do
  i=$(( i + 1))
  line=$(echo $line|sed s/\ +//|tr -s " ")
  user=$(echo $line|cut -d" " -f1)
  tty=$(echo $line|cut -d" " -f2)
  idle=$(echo $line|cut -d" " -f6)
  ip=$(echo $line|cut -d" " -f8)
  logout="$logout\n login-$i-user:$user login-$i-tty:$tty login-$i-idle:$idle login-$i-source:$ip"
 done<$TFILE
rm $TFILE
echo "$logout"
